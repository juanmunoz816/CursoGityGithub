introduccion a la terminal comandos basicos 

pwd : me indica donde estoy actualmente 
cd : Change Direction me dirige a una nueva ruta 
cd .. : me devuelve a la direción anterior 
cd . : carpeta actual
ls : los archivos que estan en la dirección 
ls -al : ver los archivos y los archivos ocultos en una lista
mkdir : make directory o crear carpeta 
touch : para crear archivos vacios 
rm : remuve o eliminar archivos
cat: mostrar el contenido de una archvio
history: para ver los historiales de comando
!numero : repetir comando en history
--help : para saber para que sirven un comando

para crear el repositorio 
git init : es para iniciar el repositorio en la carpeta 
git status : donde estoy y como estan los archivos  
git add : agrega los archivos nuevos que no se an agragado
git rm (el archivo) :saca a algun archivo del repositorio
git rm --cached (el archivo) :saca el archivo de la memoria cache o del add que no se a subido
git commit -m "mensaje" : para mandar el add al commid
git config : los datos de las configuraciones del git
git show (el archivo) : mustra los cambios de un archivo
git diff (llave del commit) : me deja ver las diferencias entre versiones
git diff : me muestra las diferencias entre lo que tengo en logal y en el add
git log --stat : para ver especificamente que ah cambiado
git log --all --graph : para ver el dibujo las rams
git log --all --graph --decorate --oneline : ver las gráficas más cool

git tag -a (nombre del tag) -m "mensaje" numero de referencia : para crear tags o versiones
git push origin --tags
git tag -d (nombre del tag)
$ git push origin :refs/tags/d(nombre del tag) : borar el tag de git hub



alias nombre ="comando" 

git branch (nombre de la rama) : creo una nueva rama
git branch -m main: para actualizar la rama como master
git branch -d (nombre de la rama): borra la rama
git branch -r :las ramas remotas
git branch -a :todas las rams
git show-brench --all : para ver en tetalle todas las ramas que existen
git push : envio todo al servidor remoto
git push origin main: 
git fetch : llamar una actualización 
git merge (rama a unir) : unificar todo 
git pull : fetch and merge
git pull origin main --allow-unrelated-histories : para mesclar el repositorio que baje y el que tengo en local
git clone : clonar un repositorio con url 


git remote add origin (url de github)
git remote : sale origin 
git remote -v : sale la dirección del origen

gitk : versión visual de git

git rebase: para unir ramas pero sin borrar el historial

git stash: guardar temporalmente
git stash pop: para acceder a los que "guarde"
git stash branch (nombre rama): para pasar lo que tengo a una nueva rama
git stash drop: borra el stash

git clean : borra lo que no se a agregado
git clean --dry-run: Simular todo lo que voy a borrar
git clean -f: borrar 

git cherry-pick (numero del commit): copia un commit de otra rama unicamente

git reflog: muestra todo (luego se hace git reset)
git reset --hard

git commit --amend :Reparar el commit anterior

git grep: buscar algo en especifico
git grep color -->use la palabra color
git grep la --> donde use la palabra la
git grep -n color–> en que lineas use la palabra color
git grep -n platzi --> en que lineas use la palabra platzi
git grep -c la --> cuantas veces use la palabra la
git grep -c paltzi --> cuantas veces use la palabra platzi
git grep -c “<p>”–> cuantas veces use la etiqueta <p>

git log-S “cabecera” --> cuantas veces use la palabra cabecera en
todos los commits.

grep–> para los archivos
log --> para los commits.

git config --global alias.(nombre de alias) "el comando"
git blame -c: quien hizo un cambio
gir blame (archivo) -L23,54 (que lineas se modificaron y quien no)

git (comando) --help: como funciona el comando

esc shif zz : asi se guarda en vim

